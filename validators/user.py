from marshmallow import Schema, fields, validate, validates_schema, ValidationError
from models import UserModel
from validators import CustomValidationError, EmailExistsError
from flask import make_response
import re


from marshmallow import Schema, fields, validate

class BaseUserSchema(Schema):
    username = fields.String(required=True, validate=validate.Length(max=20))
    email = fields.Email(required=True, validate=validate.Length(max=80))

class UserSchema(BaseUserSchema):
    id = fields.Integer(validate=validate.Range(min=1))
    created_at = fields.DateTime(dump_only=True)  # Auto-generated by backend

class NewUserSchema(BaseUserSchema):
    password = fields.String(required=True, validate=validate.Length(min=6, max=256), load_only=True)
    confirm_password = fields.String(required=True, validate=validate.Length(min=6, max=256), load_only=True)
    
    @validates_schema
    def username_length(self, data, **kwargs):
        if len(data["username"]) < 3 or len(data["username"]) > 30:
            raise CustomValidationError("Username must be at least 3 characters long and not exceed 20 characters.")

    @validates_schema
    def validate_passwords(self, data, **kwargs):
        if data['password'] != data['confirm_password']:
            raise CustomValidationError("Passwords do not match.")

    @validates_schema
    def email_exists(self, data, **kwargs):
        user = UserModel.find_by_email(data["email"])
        if user:
            print(f'Another user exist with same email: {data["email"]}')
            raise EmailExistsError(data["email"])
    

class UpdateUserSchema(BaseUserSchema):
    pass          
    
class UpdateUserPasswordSchema(Schema):
    password = fields.String(validate=validate.Length(min=6, max=256), load_only=True)  # Optional

    
    

    # @validates_schema
    # def validate_user_schema(self, data, **kwargs):
    #     #validate email
    #     user_by_email = UserModel.find_by_email(data["email"])
    #     if user_by_email: #if a user exizsts with that email
    #         if user_by_email.id != data["id"]: #if a different user exists with the that email
    #             raise ValidationError({"message": f'Another user exist with same Email: {data["email"]}'})
    #     #validate password
    #     if not re.match(r'^[a-zA-Z0-9!@#$%^&*()\-_=+\[\]{}|;:\'",.<>?/`~]+$', data["password"]):
    #         raise ValidationError({"message": "Password contains invalid characters."})